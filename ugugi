STRTOUL(3)                                                                   Linux Programmer's Manual                                                                   STRTOUL(3)

NNAAMMEE
       strtoul, strtoull, strtouq - convert a string to an unsigned long integer

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssttddlliibb..hh>>

       uunnssiiggnneedd lloonngg ssttrrttoouull((ccoonnsstt cchhaarr **_n_p_t_r,, cchhaarr ****_e_n_d_p_t_r,, iinntt _b_a_s_e));;

       uunnssiiggnneedd lloonngg lloonngg ssttrrttoouullll((ccoonnsstt cchhaarr **_n_p_t_r,, cchhaarr ****_e_n_d_p_t_r,,
                                       iinntt _b_a_s_e));;

   Feature Test Macro Requirements for glibc (see ffeeaattuurree__tteesstt__mmaaccrrooss(7)):

       ssttrrttoouullll():
           _ISOC99_SOURCE ||
               || /* Glibc versions <= 2.19: */ _SVID_SOURCE || _BSD_SOURCE

DDEESSCCRRIIPPTTIIOONN
       The  ssttrrttoouull()  function converts the initial part of the string in _n_p_t_r to an _u_n_s_i_g_n_e_d _l_o_n_g value according to the given _b_a_s_e, which must be between 2 and 36 inclusive, or
       be the special value 0.

       The string may begin with an arbitrary amount of white space (as determined by iissssppaaccee(3)) followed by a single optional '+' or '-' sign.  If _b_a_s_e is zero or 16, the string
       may  then  include a "0x" prefix, and the number will be read in base 16; otherwise, a zero _b_a_s_e is taken as 10 (decimal) unless the next character is '0', in which case it
       is taken as 8 (octal).

       The remainder of the string is converted to an _u_n_s_i_g_n_e_d _l_o_n_g value in the obvious manner, stopping at the first character which is not a valid digit in the given base.  (In
       bases above 10, the letter 'A' in either uppercase or lowercase represents 10, 'B' represents 11, and so forth, with 'Z' representing 35.)

       If  _e_n_d_p_t_r is not NULL, ssttrrttoouull() stores the address of the first invalid character in _*_e_n_d_p_t_r.  If there were no digits at all, ssttrrttoouull() stores the original value of _n_p_t_r
       in _*_e_n_d_p_t_r (and returns 0).  In particular, if _*_n_p_t_r is not '\0' but _*_*_e_n_d_p_t_r is '\0' on return, the entire string is valid.

       The ssttrrttoouullll() function works just like the ssttrrttoouull() function but returns an _u_n_s_i_g_n_e_d _l_o_n_g _l_o_n_g value.

RREETTUURRNN VVAALLUUEE
       The ssttrrttoouull() function returns either the result of the conversion or, if there was a leading minus sign, the negation of the result of the conversion represented as an un‐
       signed value, unless the original (nonnegated) value would overflow; in the latter case, ssttrrttoouull() returns UULLOONNGG__MMAAXX and sets _e_r_r_n_o to EERRAANNGGEE.  Precisely the same holds for
       ssttrrttoouullll() (with UULLLLOONNGG__MMAAXX instead of UULLOONNGG__MMAAXX).

EERRRROORRSS
       EEIINNVVAALL (not in C99) The given _b_a_s_e contains an unsupported value.

       EERRAANNGGEE The resulting value was out of range.

       The implementation may also set _e_r_r_n_o to EEIINNVVAALL in case no conversion was performed (no digits seen, and 0 returned).

AATTTTRRIIBBUUTTEESS
       For an explanation of the terms used in this section, see aattttrriibbuutteess(7).

       ┌─────────────────────────────────┬───────────────┬────────────────┐
       │IInntteerrffaaccee                        │ AAttttrriibbuuttee     │ VVaalluuee          │
       ├─────────────────────────────────┼───────────────┼────────────────┤
       │ssttrrttoouull(), ssttrrttoouullll(), ssttrrttoouuqq() │ Thread safety │ MT-Safe locale │
       └─────────────────────────────────┴───────────────┴────────────────┘
CCOONNFFOORRMMIINNGG TTOO
       ssttrrttoouull(): POSIX.1-2001, POSIX.1-2008, C89, C99 SVr4.

       ssttrrttoouullll(): POSIX.1-2001, POSIX.1-2008, C99.

NNOOTTEESS
       Since ssttrrttoouull() can legitimately return 0 or UULLOONNGG__MMAAXX (UULLLLOONNGG__MMAAXX for ssttrrttoouullll()) on both success and failure, the calling program should set _e_r_r_n_o to 0 before  the  call,
       and then determine if an error occurred by checking whether _e_r_r_n_o has a nonzero value after the call.

       In locales other than the "C" locale, other strings may be accepted.  (For example, the thousands separator of the current locale may be supported.)

       BSD also has

           uu__qquuaadd__tt ssttrrttoouuqq((ccoonnsstt cchhaarr **_n_p_t_r,, cchhaarr ****_e_n_d_p_t_r,, iinntt _b_a_s_e));;

       with completely analogous definition.  Depending on the wordsize of the current architecture, this may be equivalent to ssttrrttoouullll() or to ssttrrttoouull().

       Negative values are considered valid input and are silently converted to the equivalent _u_n_s_i_g_n_e_d _l_o_n_g value.

EEXXAAMMPPLLEESS
       See the example on the ssttrrttooll(3) manual page; the use of the functions described in this manual page is similar.

SSEEEE AALLSSOO
       aa6644ll(3), aattooff(3), aattooii(3), aattooll(3), ssttrrttoodd(3), ssttrrttooll(3), ssttrrttoouummaaxx(3)

CCOOLLOOPPHHOONN
       This  page is part of release 5.10 of the Linux _m_a_n_-_p_a_g_e_s project.  A description of the project, information about reporting bugs, and the latest version of this page, can
       be found at https://www.kernel.org/doc/man-pages/.

GNU                                                                                  2020-11-01                                                                          STRTOUL(3)
